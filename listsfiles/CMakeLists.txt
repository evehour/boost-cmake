# Created by Daniel Pfeifer <daniel@pfeifer-mail.de>
#
# Distributed under the Boost Software License, Version 1.0.
# See accompanying file LICENSE_1_0.txt or copy at
#   http://www.boost.org/LICENSE_1_0.txt

# Toolset detection.
if (MSVC60)
  set(BOOST_TOOLSET "vc6")
elseif(MSVC70)
  set(BOOST_TOOLSET "vc7")
elseif(MSVC71)
  set(BOOST_TOOLSET "vc71")
elseif(MSVC80)
  set(BOOST_TOOLSET "vc80")
elseif(MSVC90)
  set(BOOST_TOOLSET "vc90")
elseif(MSVC10)
  set(BOOST_TOOLSET "vc100")
elseif(MSVC11)
  set(BOOST_TOOLSET "vc110")
elseif(MSVC12)
  set(BOOST_TOOLSET "vc120")
elseif(MSVC)
  set(BOOST_TOOLSET "vc")
elseif(BORLAND)
  set(BOOST_TOOLSET "bcb")
else()
  string(TOLOWER "${CMAKE_CXX_COMPILER_ID}" BOOST_TOOLSET)
  if(CMAKE_CXX_COMPILER_VERSION MATCHES "([0-9]+)[.]([0-9]+)")
    set(BOOST_TOOLSET "${BOOST_TOOLSET}${CMAKE_MATCH_1}${CMAKE_MATCH_2}")
  endif()
endif()

# Append the Boost version number to the versioned name
string(REPLACE "." "_" boost_version "${BOOST_VERSION}")

# The versioned name starts with the full Boost toolset
if(WIN32)
  set(tag_toolset "-${BOOST_TOOLSET}")
  set(tag_version "-${boost_version}")
else()
  set(tag_toolset "")
  set(tag_version "")
endif()

# Add -mt for multi-threaded libraries
if(BUILD_MULTI_THREADED)
  set(tag_mt "-mt")
else()
  set(tag_mt "")
endif()

# Using the debug version of the runtime library.
# With Visual C++, this comes automatically with debug
if(MSVC)
  set(tag_rtdebug "g")
else()
  set(tag_rtdebug "")
endif()

set(CMAKE_DEBUG_POSTFIX "${tag_toolset}${tag_mt}-${tag_rtdebug}d${tag_version}")
set(CMAKE_RELEASE_POSTFIX "${tag_toolset}${tag_mt}${tag_version}")


file(MAKE_DIRECTORY "${CMAKE_CURRENT_BINARY_DIR}/lib")
file(MAKE_DIRECTORY "${CMAKE_CURRENT_BINARY_DIR}/bin")

set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY "${CMAKE_CURRENT_BINARY_DIR}/lib")
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY "${CMAKE_CURRENT_BINARY_DIR}/lib")
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY "${CMAKE_CURRENT_BINARY_DIR}/bin")

# TODO: This should be moved to ryppl somewhere and include()d in each directory
include(CMakePackageConfigHelpers)
set(BOOST_VERSION 1.5.4)
macro(write_config_file filename)
  file(WRITE ${filename}
  "
# This file is automatically generated. Changes to it will be overwritten the
# next time cmake runs.
")
  set(args ${ARGN})
  if (args)
    file(APPEND ${filename} "
macro(find_dependency dep version)
  if (NOT \${dep}_FOUND)
    set(exact_arg)
    if(\${CMAKE_FIND_PACKAGE_NAME}_FIND_VERSION_EXACT)
      set(exact_arg EXACT)
    endif()
    set(quiet_arg)
    if(\${CMAKE_FIND_PACKAGE_NAME}_FIND_QUIETLY)
      set(quiet_arg QUIET)
    endif()
    set(required_arg)
    if(\${CMAKE_FIND_PACKAGE_NAME}_FIND_REQUIRED)
      set(required_arg REQUIRED)
    endif()

    find_package(\${dep} \${version} \${exact_arg} \${quiet_arg} \${required_arg})
    if (NOT \${dep}_FOUND)
      set(\${CMAKE_FIND_PACKAGE_NAME}_NOT_FOUND_MESSAGE \"\${CMAKE_FIND_PACKAGE_NAME} could not be found because dependency \${dep} could not be found.\")
    endif()
    set(required_arg)
    set(quiet_arg)
    set(exact_arg)
  endif()
endmacro()
")
    foreach(dep ${args})
      file(APPEND ${filename} "
find_dependency(Boost${dep} ${BOOST_VERSION})
")
    endforeach()
  endif()

  file(APPEND ${filename} "
include(\${CMAKE_CURRENT_LIST_DIR}/${PROJECT_NAME}Targets.cmake)

")
endmacro()

add_subdirectory(libs/accumulators)
add_subdirectory(libs/algorithm)
add_subdirectory(libs/array)
add_subdirectory(libs/asio)
add_subdirectory(libs/assign)
add_subdirectory(libs/atomic)
add_subdirectory(libs/bimap)
add_subdirectory(libs/bind)
add_subdirectory(libs/chrono)
add_subdirectory(libs/circular_buffer)
add_subdirectory(libs/compatibility)
add_subdirectory(libs/concept_check)
add_subdirectory(libs/config)
add_subdirectory(libs/container)
add_subdirectory(libs/context)
add_subdirectory(libs/conversion)
add_subdirectory(libs/coroutine)
add_subdirectory(libs/crc)
add_subdirectory(libs/date_time)
add_subdirectory(libs/detail)
add_subdirectory(libs/disjoint_sets)
add_subdirectory(libs/dynamic_bitset)
add_subdirectory(libs/exception)
add_subdirectory(libs/filesystem)
add_subdirectory(libs/flyweight)
add_subdirectory(libs/foreach)
add_subdirectory(libs/format)
add_subdirectory(libs/function)
add_subdirectory(libs/functional)
add_subdirectory(libs/function_types)
add_subdirectory(libs/fusion)
add_subdirectory(libs/geometry)
add_subdirectory(libs/gil)
add_subdirectory(libs/graph)
add_subdirectory(libs/graph_parallel)
add_subdirectory(libs/heap)
add_subdirectory(libs/icl)
add_subdirectory(libs/integer)
add_subdirectory(libs/interprocess)
add_subdirectory(libs/intrusive)
add_subdirectory(libs/io)
add_subdirectory(libs/iostreams)
add_subdirectory(libs/iterator)
add_subdirectory(libs/lambda)
add_subdirectory(libs/locale)
add_subdirectory(libs/local_function)
add_subdirectory(libs/lockfree)
#add_subdirectory(libs/log)
add_subdirectory(libs/logic)
add_subdirectory(libs/math)
add_subdirectory(libs/move)
add_subdirectory(libs/mpi)
add_subdirectory(libs/mpl)
add_subdirectory(libs/msm)
add_subdirectory(libs/multi_array)
add_subdirectory(libs/multi_index)
add_subdirectory(libs/multiprecision)
add_subdirectory(libs/numeric/conversion)
add_subdirectory(libs/numeric/interval)
add_subdirectory(libs/numeric/odeint)
add_subdirectory(libs/numeric/ublas)
add_subdirectory(libs/optional)
add_subdirectory(libs/parameter)
add_subdirectory(libs/phoenix)
add_subdirectory(libs/polygon)
add_subdirectory(libs/pool)
add_subdirectory(libs/predef)
add_subdirectory(libs/preprocessor)
add_subdirectory(libs/program_options)
add_subdirectory(libs/property_map)
add_subdirectory(libs/property_tree)
add_subdirectory(libs/proto)
add_subdirectory(libs/ptr_container)
add_subdirectory(libs/python)
add_subdirectory(libs/random)
add_subdirectory(libs/range)
add_subdirectory(libs/ratio)
add_subdirectory(libs/rational)
add_subdirectory(libs/regex)
add_subdirectory(libs/scope_exit)
add_subdirectory(libs/serialization)
add_subdirectory(libs/signals)
add_subdirectory(libs/signals2)
add_subdirectory(libs/smart_ptr)
add_subdirectory(libs/spirit)
add_subdirectory(libs/statechart)
add_subdirectory(libs/static_assert)
add_subdirectory(libs/system)
add_subdirectory(libs/thread)
add_subdirectory(libs/timer)
add_subdirectory(libs/tokenizer)
add_subdirectory(libs/tr1)
add_subdirectory(libs/tti)
add_subdirectory(libs/tuple)
add_subdirectory(libs/type_erasure)
add_subdirectory(libs/typeof)
add_subdirectory(libs/type_traits)
add_subdirectory(libs/units)
add_subdirectory(libs/unordered)
add_subdirectory(libs/utility)
add_subdirectory(libs/uuid)
add_subdirectory(libs/variant)
add_subdirectory(libs/wave)
add_subdirectory(libs/xpressive)

add_subdirectory(tools/auto_index)
#add_subdirectory(tools/boostbook)
add_subdirectory(tools/inspect)
add_subdirectory(tools/quickbook)
